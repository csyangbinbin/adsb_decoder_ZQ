#include "stdafx.h"
#include "xml_config.h"
#include <windows.h>
#include <cassert>



#ifndef STR_GetBValue
#define  STR_GetBValue(rgb)      (LOBYTE(rgb))
#endif

#ifndef STR_GetGValue
#define  STR_GetGValue(rgb)      (LOBYTE(((WORD)(rgb)) >> 8))
#endif

#ifndef STR_GetRValue
#define  STR_GetRValue(rgb)      (LOBYTE((rgb)>>16))
#endif



ConfigManager::ConfigManager(void)
:m_pDoc(NULL)
{
}

ConfigManager::~ConfigManager(void)
{
}

bool ConfigManager::LoadConfigFile( std::string filename)//加载配置文件
{
    assert(!filename.empty()); 

    if(filename.empty()  ) 
        return false ; 

    m_pDoc = new TiXmlDocument();  
    assert(m_pDoc!=NULL && "m_pDoc==NULL") ;

    if (NULL==m_pDoc)  {  
        return false;  
    }  
    m_XMLFile = filename ; 
    return 	m_pDoc->LoadFile(filename);  
}


bool ConfigManager::GetNodePointerByName(TiXmlElement* pStartEle,std::string &strNodeName,TiXmlElement* &Node)
{
    // 假如等于根节点名，就退出  
    if (strNodeName==pStartEle->Value())  
    {  
        Node = pStartEle;  
        return true;  
    }  
    TiXmlElement* pEle = pStartEle;    
    for (pEle = pStartEle->FirstChildElement(); pEle; pEle = pEle->NextSiblingElement())    
    {    
        //递归处理子节点，获取节点指针  
        if(GetNodePointerByName(pEle,strNodeName,Node))  
            return true;  
    }    
    return false;  

}

bool ConfigManager::GetNodePointerByNameFromRoot(std::string strNodeName,TiXmlElement* &Node) 
{
    TiXmlElement *pRootEle = m_pDoc->RootElement();  
    if (NULL==pRootEle)  
    {  
        return false;  
    }  
    return GetNodePointerByName(pRootEle ,strNodeName ,Node ) ; 


}

bool ConfigManager::QueryNode_Attribute( TiXmlElement *pNode ,std::string strNodeName , AttrMap &AttMap) 
{

    TiXmlElement *pEle = NULL ; 
    bool bFind =  GetNodePointerByName(pNode , strNodeName , pEle) ; 
    if(!bFind) return false ; 

    return QueryNode_Attribute(pEle , AttMap) ; 
}

bool ConfigManager::QueryNode_Attribute( TiXmlElement *pNode ,AttrMap &AttMap) 
{
    assert(pNode!=NULL && "QueryNode_Attribute - pNode==NULL") ; 
    if (NULL!=pNode)  
    {  
        AttMap.clear() ; 
        TiXmlAttribute* pAttr = NULL;   
        for (pAttr = pNode->FirstAttribute(); pAttr; pAttr = pAttr->Next())    
        {    
            std::string strAttName = pAttr->Name();  
            std::string strAttValue = pAttr->Value();  
            AttMap.insert(std::make_pair<std::string , std::string>(strAttName,strAttValue));  
        }    
        return true;  
    }  
    else  
    {  
        return false;  
    }  
    return true;  

}

//查询pNode所对应的节点的内容
bool ConfigManager::QueryNode_Text(TiXmlElement *pNode ,std::string &strText) 
{
    assert(pNode!=NULL && "QueryNode_Text - pNode==NULL") ;
    if (NULL!=pNode)  
    {  
        strText = pNode->GetText();   
        return true;  
    }  
    else  
    {  
        return false;  
    }  

}
//查询pNode节点下名称为strNodeName的子节点的内容 
bool ConfigManager::QueryNode_Text(TiXmlElement *pNode ,std::string strNodeName , std::string &strText)
{
    TiXmlElement *pEle = NULL ; 
    bool bFind =  GetNodePointerByName(pNode , strNodeName , pEle) ; 
    assert(pEle!=NULL && "QueryNode_Text - GetNodePointerByName return NULL");
    if(!bFind) return false ; 
    return QueryNode_Text(pEle ,strText) ; 

}

bool ConfigManager::ModifyNode_Text(TiXmlElement *pNode ,std::string strText) 
{

    assert(pNode!=NULL && "ModifyNode_Text - pNod=NULL") ; 
    if (NULL!=pNode)  
    {  
        pNode->Clear();  // 首先清除所有文本  
        TiXmlText *pValue = new TiXmlText(strText);  
        pNode->LinkEndChild(pValue);  
        return true;  
    }  
    else  
    {
        return false;  
    }

}


bool ConfigManager::ModifyNode_Text(TiXmlElement *pNode ,std::string strNodeName ,std::string strText) 
{
    TiXmlElement *pEle = NULL ; 
    bool bFind =  GetNodePointerByName(pNode , strNodeName , pEle) ; 
    assert(pEle!=NULL && "ModifyNode_Text - GetNodePointerByName return NULL");
    if(!bFind) return false ; 
    return ModifyNode_Text(pEle ,strText) ; 

}

void ConfigManager::Save()
{
    assert(m_XMLFile.size()>0 && "m_XMLFile is empty!") ; 
    m_pDoc->SaveFile(m_XMLFile) ; 
}

//修改pNode所对应的节点的属性
bool ConfigManager::ModifyNode_Attribute(TiXmlElement *pNode , AttrMap &AttMap) 
{
    assert(pNode!=NULL && "ModifyNode_Attribute - pNode==NULL!") ; 
    if (NULL!=pNode)  
    {  
        TiXmlAttribute* pAttr = NULL;   
        std::string strAttName = ("");  
        std::string strAttValue = ("");  
        for (pAttr = pNode->FirstAttribute(); pAttr; pAttr = pAttr->Next())    
        {    
            strAttName = pAttr->Name();  
            AttrMap::iterator iter;  
            for (iter=AttMap.begin();iter!=AttMap.end();iter++)  
            {  
                if (strAttName==iter->first)  
                {  
                    pAttr->SetValue(iter->second);  
                }  
            }  
        }    
        return true;  
    }  
    else  
    {  
        return false;  
    }  

}

//修改pNode节点下名称为strNodeName的子节点的属性
bool ConfigManager::ModifyNode_Attribute(TiXmlElement *pNode ,std::string strNodeName ,AttrMap &AttMap)  
{
    TiXmlElement *pEle = NULL ; 
    bool bFind =  GetNodePointerByName(pNode , strNodeName , pEle) ; 
    assert(pEle!=NULL && "ModifyNode_Attribute - GetNodePointerByName return NULL");
    if(!bFind) return false ; 
    return ModifyNode_Attribute(pEle , AttMap) ; 
}

/************************************************************************/
/* 字符串转换                                                           */
/************************************************************************/

double ConfigManager::Str2Double(std::string value)
{
    return atof(value.c_str()) ; 
}


COLORREF ConfigManager::Str2Color(std::string value)
{
    char* pEnd = NULL ; 
    DWORD col= strtoul(value.c_str(), &pEnd, 16);  
    COLORREF color = RGB(STR_GetRValue(col) , STR_GetGValue(col)  ,STR_GetBValue(col)) ; 
    return color  ;
}

BOOL ConfigManager::Str2Bool(std::string value)
{
    return (_stricmp(value.c_str(),"true") == 0)  ; 
}

int ConfigManager::Str2Int(std::string value)
{

    return atoi(value.c_str()) ;
}
